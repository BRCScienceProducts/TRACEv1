function [Y,Xf,Af] = TRACE_EstT_Temperature_1_Atl_3(X,~,~)
%TRACE_ESTT_TEMPERATURE_1_ATL_3 neural network simulation function.
%
% Auto-generated by MATLAB, 21-Aug-2024 10:13:41.
% 
% [Y] = TRACE_EstT_Temperature_1_Atl_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.999961923064171;-0.999961923064171;-39.5;0;30.0000762939453];
x1_step1.gain = [1.00003807838574;1.00003807838574;0.0155038759689922;0.000363636363636364;0.206927881437043];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.7071716851037406215;-74.968503585472674899;-1.449412269911320772;-13.342993785005861085;0.3037172543250166723;4.9911866230245900411;7.0512705386092697779;3.9331214147891606636;21.051309758896600499;1.9944921511558273419;-6.8341329687729599485;-19.239655061529070679;-3.2722726808172342139;-8.8042335438221375199;-17.4836884835992592];
IW1_1 = [4.5987796090098012058 -0.26891535870020316645 4.2225433772946443511 -0.49709318575333610868 1.3001265000618420498;4.0993406909325500465 -4.4718051516204040396 6.2371332945010857784 -72.523691440416428122 4.9321557968835021413;-0.56000166551733321363 -0.73489481303007098134 3.9961414943142807843 -0.088139952694537671007 -23.46520038005306219;-12.199343085232245087 2.2382329994236163095 -1.8672867259387986305 51.900253929067673653 -12.460135999999573997;0.045317009816480527395 1.2865575419104973154 -0.74587280665726696238 1.5814040257523480637 -18.857171618823691972;-1.0237294448770504207 0.0023976445951074515893 -1.6370249604322064663 6.2292759033716524897 3.918552771700194004;-0.66964767297119465184 2.3340148719222875151 3.0101786785955790826 10.768234438599122882 28.608830708202685145;0.81183231374037212458 -2.4665924675046362324 -8.2059584077704030847 -2.6627383972735159112 -0.11731278878624856743;0.070718769661908584268 0.7893476912246925048 2.3940677437034301178 18.286138629046963189 1.0459574282742845064;-0.074704416582353966314 -0.14282502155029913604 -0.027948067093241678316 2.8809522218488203826 -2.1618776107382275953;0.22504610556260398746 -2.5622679767508365067 3.9310656610211855977 -2.2897235766901626874 -2.6475979836172096604;-0.18907946151505339305 -0.39417870296829032872 -0.10306576466428861438 -18.64418385080000462 -1.0050119645233210885;1.4336758084569687366 -0.0034723505144092876515 11.080527435910180856 3.4066338697421669757 0.56400894845740323635;25.206064988018127337 -18.582937015453044438 12.031710243418448414 3.3655764167391413189 1.1239464912268597452;0.022684327469775743269 -1.0963795656146417823 1.1689392411365064905 -15.572044858899031894 -0.32568807849566289159];

% Layer 2
b2 = [-145.20327634063352207;85.728053362531682069;-22.640480893629135295;-68.213847751350130011;2.4839527818360811473];
LW2_1 = [23.287235816854952475 -207.36280109259791971 113.02807524261601202 78.452931034942736233 216.37249649182155053 -87.825709024492084609 -50.393832132993466644 204.83891477703880923 70.448460871597404775 82.429711674404003929 -149.41603375662836584 3.4108849686167266313 -221.34735188856043919 8.9854260708468149943 194.39730468625330673;0.82772672545574033087 -0.79329327354355294588 -0.94664018314114539709 -0.084409094277619223234 -0.33331375488238867977 0.49832413032323524815 -0.0032598675904958007536 -1.8100761313816340348 -83.250999123320326589 -0.19583425545493282627 2.3730270161779420945 -4.2413095883882006021 -0.84864160755364748123 -0.061288485536959244615 3.3344766314916354233;-25.053808371612333872 -2.4707306571023197606 -11.501747802093721162 -71.27170339577253344 -23.42382714048427772 -1.7331547470533987809 -6.8162895578048923184 18.117246614486727907 -18.643980137157850407 26.219669489220265746 16.848994236799462954 -57.776925821021976049 -30.477344179119302936 -10.244881884756805945 -1.1747270611943072538;-69.898198893620744343 -71.563939898249344651 -5.6690213379377416558 -6.0644548960064117438 -77.035420623781448057 -24.679936228617258109 0.52204928170179543123 -47.693862647513157071 15.040454963988985071 -30.374417608605707386 29.723301435071846299 -54.260606937044912002 -185.3892254699462967 -17.79541970601518841 73.090225996985267898;0.4194350838761020106 -0.11409499562643771187 0.025917554200645384621 0.024835864947233353417 0.052447188422797171026 -0.16791277847516999921 -0.062565769768495982373 -0.57170294343172711748 -0.93009241712608159425 0.72973246531034574591 0.51314978232628449817 -2.1615704825956241208 -0.28814553208109255911 -0.22163984323612834215 1.6410817075746995108];

% Layer 3
b3 = 0.022727914103405182089;
LW3_2 = [0.014098028206826901387 0.12852167456342139529 -0.013345103863145009113 0.013018443382988622789 -0.9883181354672621044];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0596262898164022;
y1_step1.xoffset = -2.99982047080994;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
