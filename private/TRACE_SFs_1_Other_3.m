function [Y,Xf,Af] = TRACE_SFs_1_Other_3(X,~,~)
%TRACE_SFS_1_OTHER_3 neural network simulation function.
%
% Auto-generated by MATLAB, 21-Aug-2024 10:13:42.
% 
% [Y] = TRACE_SFs_1_Other_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.999999451688695;-0.999617390652097;-75.291;0;31.351;-1.9283];
x1_step1.gain = [1.00007734910688;1.00019210311383;0.014121999957634;0.0003147128245476;0.364192585038969;0.0607044754374516];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.9249155129425794541;-10.016976133553040285;4.0616785729789182113;-4.4196277711947882239;-1.481332860446177957;4.1039037896336481026;-0.30205778767455493394;0.86023759995561521752;0.078725203990243922125;5.2967980173527378085;-1.1788033368625954189;0.11675168142279883365;-2.8702782663978636535;1.6580498127407599096;-2.1437913349011425979];
IW1_1 = [0.78473779998077808351 -1.5645468904790018616 -0.53598073673385371318 0.44312119839238883756 -2.8601096101559582152 2.1954686125472999692;6.575719773387851852 3.3683141610834250734 0.26300672487589399351 -1.4705764465736244073 -0.50533155842357213583 -3.3039788943296937163;2.3107200739812157053 -1.7560237084401648655 0.64754053055659488436 0.5762696374421398815 0.68510434543833809151 -2.293810487303878265;0.6995208236019596626 1.9316089860513094845 1.305328224971497697 -3.7359708098742578919 3.7530297043051836781 -0.19533528153656223858;-0.12271959783283760415 -0.16390692419183183759 -0.18385114986951472948 1.0741202108713552299 1.3534604275756949576 -3.4330584162508577251;-3.9847308451138405694 -1.3578204775474351784 3.6986888463686820039 1.0543837811450538222 -5.10865631648180063 0.85628840312444765015;1.2474789082092989645 0.97893517088247505864 4.5160036157743084217 0.10298464588701754241 -0.34151179164769857044 1.7757283842845714705;0.50583031895962993207 0.096203490045615402959 0.41028013663207713035 -0.28210305990503131701 1.8607698338475477939 1.3878919641356524117;1.1953331954762491662 2.0010152251691479819 -0.45251408179285751432 -0.64661299857638210309 -0.76663210881859222834 -1.2231654075994273789;2.2497122020949409382 -0.042204540264787870907 -2.8460142562108887709 -2.7370051547006619685 -5.4659402521628761562 -2.6812518485294951631;-0.1955067597172116256 0.87238611734851223556 1.0211003536610459008 -2.7699347284259365765 0.80056624642101670286 3.881835821880589954;1.7125377212888766021 -1.3281412788419040272 1.3964967945196946619 -1.9075451901222069129 0.75253233368548755333 -1.7847608724859544971;-1.5572241502156010107 2.1824356821604693479 -1.5229320706232469806 2.1772302126168940895 2.3694111106052329063 0.39304848974362571745;1.1685303399779607414 0.4628235851521275146 -0.44427890417253240729 -0.50652983507156013054 -0.34571958655565426799 0.40168235263460383422;-0.72084492934385402396 0.47933376108100494983 -1.1257477615313147279 -0.27017926154399368732 0.34547169486870976662 1.6766271159001058244];

% Layer 2
b2 = [-2.3275372226002533083;-0.91333804206819757532;0.46533971374401794652;0.16277776561225254515;2.6564347733566502363];
LW2_1 = [0.061673915429622083728 2.4459206528498795841 -0.25161000719701237527 -0.30340024930262671221 -0.6742523319744927468 0.55955299100152922076 0.58204383085580679857 0.68934104211336855172 0.12737162067227869588 -0.40133600325839025036 0.90066480713627050658 0.6668257914974312639 -2.2902720532457863101 -0.55701730584938080604 0.56116226749975939292;0.25707845501735571148 0.30202624561471530518 0.14233981155612335234 1.7081364519842021643 2.8500329343184529485 -2.1073599577049617615 -0.21252445035433761844 0.84060558380419214686 -3.0581572975676540871 -0.83131991369442626016 1.51560572234753832 1.2872716789889306899 2.4409546086421127775 2.2995468034669923618 0.30474227756036798009;-0.71449816149178790869 -0.077610962951437628687 -2.182610166130657614 0.5844314546936426602 1.4289140696426654298 0.48752363676004578652 0.78663183709739481486 2.0346156972410054387 -0.76052645972787025208 -0.8981416197508711452 -0.69820686459465519658 -1.8875114950264963998 -1.1625239757994123568 -2.168380167625300281 -5.2454937368472567272;1.0852122156319339297 -3.7122568204012695858 -4.2221753781676172324 -0.13442798721632634451 -1.6470548505374800197 0.17800703458560185322 0.39068836713253402015 -2.5424385287722692794 -0.65498241484146890734 1.6232627705478679392 -0.037006263659804486399 -0.27259087390217207059 0.28889748800313047594 1.9854054073781834955 1.4345387685302430913;-0.58438911447072261485 -1.566491312290788418 -2.5735579290111205708 0.71767675545416564908 -1.9263566590639527032 -0.64761260859382063781 0.010938463615367821635 -2.6605497181367696591 -0.12893086501776229724 0.65236931509245865701 -4.9487842893738811512 -0.49887027172328496372 -4.3627085908354024113 -1.6811741717239832017 -2.4213742754866847129];

% Layer 3
b3 = -1.345149063272250034;
LW3_2 = [-1.4930798012075077175 -0.38192197853072196168 0.55678895591796317976 -0.37942598413306677374 -0.49334083425464408945];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.479723223512926;
y1_step1.xoffset = -2.9999223498254;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
