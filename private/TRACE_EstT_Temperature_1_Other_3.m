function [Y,Xf,Af] = TRACE_EstT_Temperature_1_Other_3(X,~,~)
%TRACE_ESTT_TEMPERATURE_1_OTHER_3 neural network simulation function.
%
% Auto-generated by MATLAB, 21-Aug-2024 10:13:41.
% 
% [Y] = TRACE_EstT_Temperature_1_Other_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.999961923064171;-0.999961923064171;-77.5;0;30.0081539154053];
x1_step1.gain = [1.00003807838574;1.00003807838574;0.0119760479041916;0.000363636363636364;0.213330946207267];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.9205191346499281835;7.4847995378778167108;4.1813029071984386675;-0.38780591283279858272;-11.539102859239804388;-3.2895191791350133492;-17.057270735085364066;-0.41807375636327365198;-19.888768000006447068;0.064942780311194478471;8.0651346868687205927;-0.62971308672823977926;-53.968071598280509704;15.706064669645359189;-17.030303701679425643];
IW1_1 = [0.040869457190063428198 2.647515795731456123 0.46415388707507665433 -3.2640546141599413588 -1.8171660426016564838;2.195282206324384866 1.2886695954292075594 6.0478003417596415403 6.3072376442284419085 -10.662880127256396889;-1.0110292759311370059 -0.67303261381267387442 1.4635462180550125044 3.1568773593432934987 -6.2097358122035899441;0.039904763417343419585 0.10050147527327485397 0.72782986054625409267 -0.31077736829350877112 0.30925257954110335623;11.377824459865546913 11.147168062059446214 5.6560498000579597644 -26.791633287725016288 -35.431930660319309823;0.33727010293091863602 0.027104656826448129958 -3.9285258432684879715 0.54562431847335179924 -0.8747859309619365753;-0.030332709623217282702 0.25931963273392422131 -2.1698846425840101482 -16.387128503397317303 -0.70232709990490271856;-0.014599691199892688917 0.082717089043321798125 1.0206457111641014102 -0.36365912201574601692 0.31034998574771971436;22.071156595626924002 -11.367301820692746972 -10.962506588257426188 0.68114613132486567793 58.35111641951566952;1.2751910702165669687 -2.3182097064529090247 -0.15510778683426951208 1.0145477941586000803 -0.58341243588430025113;-0.117222247512359809 -0.99245194685846338523 3.353306697006504411 11.148338049278040174 5.4398189059535324574;0.23424330583052968557 0.17270364939453156095 0.11079884168103368292 -0.59216683601067376941 0.97999015046720161504;-6.5083785293342248934 -8.1258818390392288933 3.8117311670692100023 -43.438991638475307866 -22.42086829517844393;10.801612897502327115 20.410337871127076426 3.7538014087110398442 -7.7041459416007445071 6.1468130594938266142;-0.032417451157423289587 0.25834586983452156872 -2.2602729484486130396 -16.302172018682647092 -0.6457073406381479419];

% Layer 2
b2 = [4.6651842885449772425;-43.845207035509396576;1.7976726714038009369;-1.1809480367218208041;-68.091584318998542358];
LW2_1 = [-0.11933165228635385369 -0.089703186476392637871 -0.26583097614079731486 27.451987707730783228 -0.039097741298852538294 3.3765890287722006846 -24.971079823383590224 -18.996527014280044199 -0.0089988073973614052248 0.12642395630685673846 0.17723244700286652775 -5.8525375619138122474 -0.06569757847860815958 0.13586338768325156856 24.94146736532997366;-6.1558981174389852953 -30.786691753947660999 23.377979484461882009 -0.93303939882487252344 -18.869448648650710254 -25.433405064536472651 -9.0876562073475533055 63.107503750495233419 22.005669719046572652 -79.630752951371263748 -31.257946108466452273 -85.269649503722391159 8.558732480426836986 21.942799647500418558 8.1383726140537291371;-1.4927871296775721 -0.81473016271682763279 -0.71229410372899204518 38.484993883375778978 0.030509507212967204581 1.0138956196837203283 21.248669011332193435 -28.267491399821011555 1.2340994252599164493 -2.3779885616992606501 0.71585646413382686415 -4.2809071266631191222 1.0816584545661518391 0.82004956990797184258 -22.379565145991904274;-4.0896124656463035407 1.9398974575684486688 2.7246694796530679383 9.3038540979113673046 18.288897356817734874 54.959069734651215811 -7.7317921145093224666 -44.639634454202997915 5.490411683984626201 -12.352125437053432577 -8.840344940645534777 11.571111098169787113 8.8871486193310396118 14.116397511650028207 -14.307950684861074464;-27.136918419789175516 2.438028699847201608 -10.959215643849381294 -4.0881574128338984409 -9.0726301838254457266 -78.252258351491391863 15.547028873846132413 31.492579157074185758 -7.9747650482822836082 -17.624830467010667689 -6.3937154261040811676 -5.3672813246666439824 -15.450790466824498637 -4.8819248443356819678 4.048071811898395822];

% Layer 3
b3 = 0.081346996811808375272;
LW3_2 = [-0.92419103652034251262 -0.011636737419623210607 0.052002952676231929685 -0.043892440993596015808 -0.031675222201774135];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0530989193133871;
y1_step1.xoffset = -2.99982047080994;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
